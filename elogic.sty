\ProvidesPackage{elogic}

\RequirePackage{ifthen}

\newboolean{dijkstraquant} 
		% Dijkstra or Gries style quantification?
		% Dijkstra < A i: 0 ² i < n: E >
		% Gries < A i | 0 ² i < n: E >

\newboolean{parenthquant}
		% Enclose quantification with angular brackets or parentheses?

\DeclareOption{dijkstra_quant}{\setboolean{dijkstraquant}{true}}
\DeclareOption{parenth_quant}{\setboolean{parenthquant}{true}}
\ProcessOptions

\newcounter{assumptionnb}
\newcounter{subproof}
\newcounter{indent}
\newcounter{firstbranch}
\newcounter{openchange}
\newcounter{openchanged}
\setcounter{openchange}{0}
\setcounter{openchanged}{0}
\newcounter{usequotes}
\newboolean{hasassumptions}
\newcounter{assumptionblock}
\newlength{\hintmargin}
\newlength{\relationmargin}
\newlength{\subproofindent}
\newlength{\hintwidth}
\newlength{\stepspacing}
\newlength{\basicopseparation}

\setlength{\hintmargin}{20pt}
\setlength{\relationmargin}{5pt}
\setlength{\subproofindent}{30pt}
\setlength{\stepspacing}{8pt}
\setlength{\basicopseparation}{5pt}

	%
	% Proof structure
	%
\newcommand{\definetabs}
{  
	\kill
%	\setcounter{indent}{0}
%	\whiledo{\value{indent} < \value{subproof}}{
%		$\quad$
%		\addtocounter{indent}{1}
%	} 	
	. \hspace{\value{subproof} \subproofindent}
	. \hspace{\subproofindent} . \= \hspace{\relationmargin} . \= \hspace{\hintmargin} . \= $\qquad$ . \= \kill
}
\newcommand{\entersubproof}
{
	\addtocounter{subproof}{2}
	\setcounter{firstbranch}{1}
	\definetabs
}
\newcommand{\exitsubproof}
{
	\addtocounter{subproof}{-2}
	\setcounter{firstbranch}{1}
	\definetabs 
}
\newcommand{\enterassumptionscope}
{
	\addtocounter{assumptionblock}{1}
	\addtocounter{subproof}{1}
	\definetabs
}
\newcommand{\exitassumptionscope}
{
	\ifthenelse{\value{assumptionblock} = 2 * ( \value{assumptionblock} / 2 )}
	{} {
		\\[\stepspacing]
		\addtocounter{subproof}{-1}
		\addtocounter{assumptionblock}{-1}
		\definetabs
		\> \keyword{end} 
	}
}

\newcommand{\keyword}[1]{\textbf{#1}}

	% Environment for a formal derivation
\newenvironment{deriv}
{
	\setcounter{subproof}{0}
	\setcounter{firstbranch}{0}
	\setcounter{assumptionblock}{0}
	\setcounter{assumptionnb}{1}
	\begin{tabbing}
		\definetabs
} {
	\exitassumptionscope
	\end{tabbing}
}
	% One step
\newcommand{\step}[1]
{
	\ifthenelse{\boolean{hasassumptions}}
	{
		\\ \> \keyword{in} \\[\stepspacing]
		\enterassumptionscope
	} {}
	\ifthenelse{\value{firstbranch} = 1 \AND \NOT \boolean{hasassumptions}}
	{
		\> $\bullet$ \> $#1$
	}{
		\> \> $#1$
	} 
	\setboolean{hasassumptions}{false}
	\setcounter{firstbranch}{0}
	\ifthenelse{\value{openchange}=1 \OR \value{openchanged}=1}
	{
		CODE QUOTATION LEFT OPEN
		\setcounter{openchange}{0}
		\setcounter{openchanged}{0}
	} {}
}
	% A justification between two steps
\newcommand{\hint}[2]{
	\settowidth{\hintwidth}{#2} $\ifthenelse{\lengthtest{#1 < \hintwidth}}{
		\setlength{\hintwidth}{#1}
	}{}
	\left \{\quad \parbox{\hintwidth}{   #2   }\quad \right \}$
}	
\newcommand{\infer}[3][4in]{ 
	\\[\stepspacing]  \> $\nospace{#2}$ \> \>  \hint{#1}{#3}  \\[\stepspacing]
}
	% Concluding note of a derivation
\newcommand{\note}[1]{
	$\qquad \qquad$ -- #1 -- 
}
	% An ad hoc derivation
\newcommand{\sidederiv}[1]
{	
	\setcounter{assumptionblock}{2 * \value{assumptionblock}}
	\entersubproof
%	\vspace{3\stepspacing}
	#1 
	\exitassumptionscope
	\\ [\stepspacing]
	\exitsubproof
	\setcounter{assumptionblock}{ \value{assumptionblock} / 2}
}
	% Introduce one assumption  
\newcommand{\assume}[1]
{
	\ifthenelse{\boolean{hasassumptions}}
	{} {
		\> \keyword{assume}
	}
	\\[\stepspacing] \>  \> \> $#1$ \` (hyp\arabic{assumptionnb})
	\addtocounter{assumptionnb}{1}
	\setboolean{hasassumptions}{true}
}

	%
	% Proof anotation
	%
\newcommand{\selectquotes}[2]{
	\ifthenelse{\value{usequotes} = 0}{#1}{#2}}
\newcommand{\changeopen}[0]{ 
	\selectquotes{ \llcorner }{''}}
\newcommand{\changeclose}[0]{ 
	\selectquotes{ \lrcorner }{''}}
\newcommand{\changedopen}[0]{ 
	\selectquotes{ \ulcorner }{} }
\newcommand{\changedclose}[0]{ 
	\selectquotes{ \urcorner }{} }
\renewcommand{\"}[0]{
	\ifthenelse{\value{openchange} = 0} {
		\setcounter{openchange}{1}
		\changeopen
	} {
		\setcounter{openchange}{0}
		\changeclose
	}
}
\renewcommand{\*}[0]{
	\ifthenelse{\value{openchanged} = 0} {
		\setcounter{openchanged}{1}
		\changedopen
	} {
		\setcounter{openchanged}{0}
		\changedclose
	}
}

	%
	% Operators of propositional and predicate logic
	%
\newboolean{usespace}
\setboolean{usespace}{true}
\newcommand{\nospace}[1]{ 
	\setboolean{usespace}{false} 
	#1 
	\setboolean{usespace}{true} 
}
\newcommand{\opspace}[2]{
	\ifthenelse{\boolean{usespace}}
	{
		\hspace{#1 \basicopseparation}
		#2
		\hspace{#1 \basicopseparation}
	}{
		#2
	}
}
\ifthenelse{\boolean{parenthquant}}
{
	\newcommand{\openquant}{(}
	\newcommand{\closequant}{)}
}{
	\newcommand{\openquant}{\langle}
	\newcommand{\closequant}{\rangle}
}
\ifthenelse{\boolean{dijkstraquant}}
{
	\newcommand{\quantsep}{:}
}{
	\newcommand{\quantsep}{\ |}
}

\newcommand{\iter}[4]{\openquant\:#1\ #2 \quantsep \ #3 :\ #4\:\closequant}
\newcommand{\setcomp}[3]{ \{ \: #1 \quantsep \: #2 : \ #3 \: \} } 


\let\Oldland\land
	\renewcommand{\land}{ \opspace{1}{\Oldland} }
\let\OldLor\lor
	\renewcommand{\lor}{ \opspace{1}{\Oldlor} }
\ifthenelse{\isundefined{\implies}} {
	\newcommand{\implies}{ \opspace{2}{\Rightarrow} }
} {
	\renewcommand{\implies}{ \opspace{2}{\Rightarrow} }
}
\newcommand{\implied}{ \opspace{2}{\Leftarrow} }
\let\Oldequiv\equiv
	\renewcommand{\equiv}{ \opspace{3}{\Oldequiv}}